@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@page "/addproductpage"
@using FirstWebApp.Logic

<h1 class="mb-3 mt-3">Add Product</h1>

<EditForm EditContext="@EditContext" class="row p-3" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    
    <div class="col-md-12 mb-3">
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="ProductModel.Name" class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="ProductModel.Price" class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="stock">Stock</label>
        <InputNumber id="stock" @bind-Value="ProductModel.Stock" class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="date">Published Date</label>
        <InputDate id="date" @bind-Value="ProductModel.Date" class="form-control"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="ProductModel.Category" class="form-control">
            <option value=""></option>
            @foreach (var category in categories)
            {
                <option value="@category">@category</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-12 mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" @bind-Value="ProductModel.Description" class="form-control"/>
    </div>
    <div class="col-12 mb-3">
        <div class="form-check">
            <InputCheckbox id="IsPublished" @bind-Value="ProductModel.IsPublished" class="form-check-input"/>
            <label class="form-check-label" for="IsPublished">
                Published
            </label>
        </div>
    </div>
    @if (FailedValidation)
    {
        <p style="color: red">Failed to validate</p>
    }
    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

<CounterComp amountOfDice="2"></CounterComp>

@code {
    private Product ProductModel = new Product{};
    private EditContext EditContext;
    private List<Product> ProductList = new List<Product>();
    public static string ProductListKey = "ProductsKey";
    public bool FailedValidation = false;

    private string[] categories = new[]
    {
        "computer", "audio", "video", "memory", "other"
    };
    

    protected override void OnInitialized()
    {
        EditContext = new EditContext(ProductModel);
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (await localStore.GetItemAsync<List<Product>>(ProductListKey) != null)
        {
            ProductList = await localStore.GetItemAsync<List<Product>>(ProductListKey);
        }
    }
    
    public async void UpdateLocalStorage()
    {
        await localStore.SetItemAsync(ProductListKey, ProductList);
    }

    private void HandleSubmit()
    {
        if (EditContext.Validate())
        {
            FailedValidation = false;
            ProductList.Add(ProductModel);
            UpdateLocalStorage();
            ProductModel = new Product();
            NavigationManager.NavigateTo("/productpage");
        }
        else
        {
            FailedValidation = true;
        }
    }

}